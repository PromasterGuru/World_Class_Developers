task jacocoTestReport(type: JacocoReport, dependsOn : ['testDebugUnitTest', 'createDebugCoverageReport']) {
    description = 'Generate JaCoCo coverage report'
    group       = 'Reporting'

    reports {
        xml.enabled  = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/*/Test*.*',
            'android/**/*.*',
            'android/*.*',
            'android/**/**/**/*.*',
            'de.hdodenhof.circleimageview/R.class',
            'com.**',
            '**/*$*$*.*'
    ]
    def debugTree = fileTree(
            dir: "$project.buildDir/intermediates/app_classes/debug/",
            excludes: fileFilter
    )
    def mainSrc = "${project.projectDir}/app/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}